{"version":3,"sources":["ebird-ext/index.js","NavBar.js","Map.js","RadialView.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["fs","require","promises","_","Papa","moment","GeoJsonGeometriesLookup","difference","removeSpuh","arr","newArr","i","includes","split","slice","join","specie","push","uniq","getData","input","a","readFile","parse","header","data","parseDateformat","timespan","dateFormat","Error","momentFormat","dateStr","createPeriodArray","periodArray","period","Date","SpeciesTotal","uniqBy","length","Species","sortBy","reverse","locationFilter","list","opts","state","filter","x","State","dateFilter","year","format","orderByDate","orderBy","e","biggestTime","dataByDate","forEach","firstTimes","speciesIndex","firstTimeList","countUniqueSpecies","getAllTowns","geojson","towns","features","t","town","properties","TOWNNAMEMC","glookup","Town_boundaries","d","point","type","coordinates","Longitude","Latitude","getContainers","Town","speciesSeenInVermont","o","mapped","map","flatten","all","species","speciesByDate","speciesTotal","notSeen","console","log","County","regions","getRegions","r","region","name","Vermont_regions","Math","abs","parseFloat","toString","Region","radialSearch","radius","distance","lat","long","areaResults","quadBirds","files","Promise","file","contents","concat","completionDates","seen","undefined","audio","photo","Format","completed","isBefore","NavBar","className","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","this","props","active","onClick","changeActiveView","class","href","Component","d3","d3Geo","topojson","Map","createMap","bind","colorArea","color","vermont","j","node","width","size","height","projection","geoTransverseMercator","rotate","translate","scale","path","geoPath","svg","select","append","attr","scaleQuantize","domain","range","dataTown","speciesTotals","vt","objects","vt_towns","geometries","jsonTown","toUpperCase","feature","Biophsyical_regions","dataRegion","datum","style","townSelected","selectAll","enter","on","capitalizeFirstLetter","string","charAt","xPosition","mouse","yPosition","text","toLowerCase","html","remove","transition","duration","lake","ref","SpeciesTable","Table","striped","bordered","hover","colSpan","index","key","Location","TargetsTable","RadialView","Object","values","entry","arrangeData","Footer","ebird","papaparseOptions","dynamicTyping","skipEmptyLines","App","handleChange","changeState","setState","res","onFileLoaded","label","parserOptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.922f5bf1.chunk.js","sourcesContent":["import Town_boundaries from './VT_Data__Town_Boundaries'\nimport Vermont_regions from './Polygon_VT_Biophysical_Regions'\nconst fs = require('fs').promises\nconst _ = require('lodash')\nconst Papa = require('papaparse')\nconst moment = require('moment')\nconst GeoJsonGeometriesLookup = require('geojson-geometries-lookup')\nconst difference = require('compare-latlong')\n\nfunction removeSpuh (arr) {\n  const newArr = []\n  for (var i in arr) {\n    // TODO Mixed results comparing MyEBirdData and Audio and Video data\n    if (arr[i]['Scientific Name'] &&\n      !arr[i]['Scientific Name'].includes('sp.') &&\n      !arr[i]['Scientific Name'].includes(' x ') && // Get rid of hybrids\n      !arr[i]['Scientific Name'].includes('Domestic type') && // Get rid of Domestic types\n      !arr[i]['Scientific Name'].split(' ').slice(0, 2).join(' ').includes('/') // No Genus-level splits\n      // !arr[i]['Scientific Name'].includes('[') &&\n      // !arr[i]['Scientific Name'].match(/.* .* .*/g) &&\n      // !arr[i]['Scientific Name'].includes('/')\n    ) {\n      // Remove subspecies only entries\n      const specie = arr[i]\n      specie['Scientific Name'] = specie['Scientific Name'].split(' ').slice(0, 2).join(' ')\n      newArr.push(arr[i])\n    } else {\n      // Use this to find excluded entries\n      // console.log(arr[i]['Scientific Name'])\n    }\n  }\n  return _.uniq(newArr)\n}\n\nasync function getData (input) {\n  if (fs) {\n    input = await fs.readFile(input, 'utf8')\n    input = Papa.parse(input, { header: true })\n    return removeSpuh(input.data)\n  }\n\n  return removeSpuh(input)\n}\n\nfunction parseDateformat (timespan) {\n  let dateFormat\n  if (timespan === 'year') {\n    dateFormat = 'YYYY'\n  } else if (timespan === 'month') {\n    dateFormat = 'YYYY-MM'\n  } else if (timespan === 'day') {\n    dateFormat = 'YYYY-MM-DD'\n  } else if (timespan) {\n    throw new Error('Unable to parse timespan. Must be: year, month, or day.')\n  }\n  return dateFormat\n}\n\nfunction momentFormat (dateStr) {\n  if (dateStr.includes('-')) {\n    return 'YYYY-MM-DD'\n  } else if (dateStr.includes('/')) {\n    return 'MM/DD/YYYY'\n  } else {\n    throw new Error('Invalid Date String')\n  }\n}\n\nfunction createPeriodArray (data) {\n  const periodArray = []\n  for (const period in data) {\n    periodArray.push({\n      Date: period,\n      SpeciesTotal: removeSpuh(_.uniqBy(data[period], 'Scientific Name')).length,\n      Species: removeSpuh(_.uniqBy(data[period], 'Scientific Name'))\n    })\n  }\n  return _.sortBy(periodArray, 'SpeciesTotal').reverse()\n}\n\nfunction locationFilter (list, opts) {\n  // TODO Make State and Country and County and Town work\n  if (!opts.state) {\n    return list\n  }\n\n\n  return list.filter((x) => {\n    // TODO Add a mapping from Vermont to US-VT, for all states and provinces\n    if (x[\"State/Province\"] === 'US-VT') {\n      x.State = 'Vermont'\n    }\n    return (x.State) ? x.State === opts.state : false;\n  })\n}\n\nfunction dateFilter (list, opts) {\n  // TODO Make month and day work\n  if (!opts.year) {\n    return list\n  }\n  return list.filter(x => {\n    return moment(x.Date, momentFormat(x.Date)).format('YYYY') === opts.year\n  })\n}\n\nfunction orderByDate (arr) {\n  return _.orderBy(arr, (e) => moment(e.Date, momentFormat(e.Date)).format())\n}\n\nasync function biggestTime (timespan, opts) {\n  const dateFormat = parseDateformat(timespan)\n  const data = await getData(opts.input)\n  const dataByDate = {}\n\n  // Sort by the amount of unique entries per day\n  data.forEach((e) => {\n    const period = moment(e.Date, momentFormat(e.Date)).format(dateFormat)\n    if (!dataByDate[period]) {\n      dataByDate[period] = [e]\n    } else {\n      dataByDate[period].push(e)\n    }\n  })\n\n  return createPeriodArray(dataByDate)[0]\n}\n\nasync function firstTimes (timespan, opts) {\n  const dateFormat = parseDateformat(timespan)\n  const data = orderByDate(await getData(opts.input)) // Sort by the date, instead\n  const dataByDate = {}\n  const speciesIndex = {}\n\n  // Sort by the amount of unique entries per day\n  data.forEach((e) => {\n    const period = moment(e.Date, momentFormat(e.Date)).format(dateFormat)\n    if (!speciesIndex[e['Scientific Name']]) {\n      if (!dataByDate[period]) {\n        dataByDate[period] = [e]\n      } else {\n        dataByDate[period].push(e)\n      }\n      // TODO Use scientific name\n      speciesIndex[e['Scientific Name']] = e.Date\n    }\n  })\n\n  return createPeriodArray(dataByDate)[0]\n}\n\nasync function firstTimeList (opts) {\n  // TODO Fix\n  // const dateFormat = parseDateformat('day')\n  // const data = orderByDate(dateFilter(locationFilter(await getData(opts.input), opts), opts))\n  // const dataByDate = {}\n  // const speciesIndex = {}\n  //\n  // data = countUniqueSpecies(data)\n  //\n  // let i = 1\n  // // TODO Doesn't work for MyEBirdData for some reason\n  // _.sortBy(createPeriodArray(dataByDate), 'Date').forEach((e) => {\n  //   e.Species.forEach((specie) => {\n  //     console.log(`${i} | ${specie['Common Name']} - ${specie['Scientific Name']} | ${(specie.County) ? specie.County + ', ' : ''}${specie['State/Province']} | ${e.Date}`)\n  //     i++\n  //   })\n  // })\n}\n\n// Sort by the amount of unique entries per day\nfunction countUniqueSpecies (data, dateFormat) {\n  const speciesIndex = {}\n  const dataByDate = {}\n  data.forEach((e) => {\n    const period = moment(e.Date, momentFormat(e.Date)).format(dateFormat)\n    const specie = e['Scientific Name']\n    if (!speciesIndex[specie]) {\n      if (!dataByDate[period]) {\n        dataByDate[period] = [e]\n      } else {\n        dataByDate[period].push(e)\n      }\n      speciesIndex[specie] = e.Date\n    }\n  })\n\n  return dataByDate\n}\n\nfunction getAllTowns (geojson) {\n  const towns = []\n  geojson.features.forEach((t) => {\n    towns.push({\n      town: t.properties.TOWNNAMEMC\n    })\n  })\n  return towns\n}\n\n/* node cli.js count -i=MyEBirdData.csv --town=\"Fayston\" --state=Vermont\nAs this is set up, it will currently return only the first time I saw species in each town provided, in Vermont */\nasync function towns (opts) {\n  const geojson = Town_boundaries\n  const glookup = new GeoJsonGeometriesLookup(geojson)\n  opts.state = 'Vermont'\n  const dateFormat = parseDateformat('day')\n  let data = orderByDate(locationFilter(await getData(opts.input), opts), opts)\n  data.forEach(d => {\n    let point = {type: \"Point\", coordinates: [d.Longitude, d.Latitude]}\n    let town = glookup.getContainers(point)\n    if (town.features[0].properties.TOWNNAMEMC) {\n      d.Town = town.features[0].properties.TOWNNAMEMC\n    }\n  })\n  var speciesSeenInVermont = []\n  _.forEach(countUniqueSpecies(data, dateFormat), (o) => {\n    var mapped = _.map(o, 'Common Name')\n    speciesSeenInVermont.push(mapped)\n  })\n  speciesSeenInVermont = _.flatten(speciesSeenInVermont)\n  if (opts.all) {\n    const towns = getAllTowns(geojson)\n    towns.forEach(t => {\n      let i = 0\n      t.species = []\n      t.speciesByDate = countUniqueSpecies(data.filter(x => x.Town === t.town), dateFormat)\n      _.sortBy(createPeriodArray(t.speciesByDate), 'Date').forEach((e) => {\n        e.Species.forEach((specie) => {\n          t.species.push(specie['Common Name'])\n          i++\n        })\n      })\n      t.speciesTotal = i\n      t.notSeen = _.difference(speciesSeenInVermont, t.species)\n    })\n\n    return towns\n    // fs.writeFile('vt_town_counts.json', JSON.stringify(towns), 'utf8')\n\n  } else if (opts.town) {\n    data = countUniqueSpecies(data.filter(x => x.Town === opts.town), dateFormat)\n\n    let i = 1\n    // TODO Doesn't work for MyEBirdData for some reason\n    _.sortBy(createPeriodArray(data), 'Date').forEach((e) => {\n      e.Species.forEach((specie) => {\n        console.log(`${i} | ${specie['Common Name']} - ${specie['Scientific Name']} | ${opts.town}, ${(specie.County) ? specie.County + ', ' : ''}${specie['State']} | ${e.Date}`)\n        i++\n      })\n    })\n  }\n}\n\n\n/* node cli.js count -i=MyEBirdData.csv --town=\"Fayston\" --state=Vermont\nAs this is set up, it will currently return only the first time I saw species in each town provided, in Vermont */\nasync function regions (opts) {\n  const geojson = Vermont_regions\n  const glookup = new GeoJsonGeometriesLookup(geojson)\n  opts.state = 'Vermont'\n  const dateFormat = parseDateformat('day')\n  let data = orderByDate(locationFilter(await getData(opts.input), opts), opts)\n  data.forEach(d => {\n    let point = {type: \"Point\", coordinates: [d.Longitude, d.Latitude]}\n    let region = glookup.getContainers(point)\n    // Move it just below the border. This is likely to be the main issue with this map.\n    if (!region.features[0]) {\n      point = {type: \"Point\", coordinates: [d.Longitude, 45-(Math.abs(parseFloat(d.Latitude))-45).toString()]}\n      region = glookup.getContainers(point)\n    }\n    d.Region = region.features[0].properties.name\n  })\n\n  function getRegions (geojson) {\n    const regions = []\n    geojson.features.forEach((r) => regions.push({ region: r.properties.name }))\n    return regions\n  }\n\n  const regions = getRegions(geojson)\n  regions.forEach(r => {\n    let i = 0\n    r.species = []\n    r.speciesByDate = countUniqueSpecies(data.filter(x => x.Region === r.region), dateFormat)\n    _.sortBy(createPeriodArray(r.speciesByDate), 'Date').forEach((e) => {\n      e.Species.forEach((specie) => {\n        r.species.push(specie['Common Name'])\n        i++\n      })\n    })\n    r.speciesTotal = i\n    console.log(`Region: ${r.region}. Species count: ${r.speciesTotal}.`)\n  })\n\n  return regions\n  // fs.writeFile('vt_region_counts.json', JSON.stringify(regions), 'utf8')\n}\n\nasync function radialSearch (opts) {\n  const dateFormat = parseDateformat('day')\n  let radius = opts.distance || 10 // miles\n  let lat = opts.coordinates[0]\n  let long = opts.coordinates[1]\n  console.log(dateFormat, lat, long)\n  let data = await getData(opts.input)\n\n  // Get a total list of species that you have seen in Vermont\n  // TODO Get a list of all species ever seen in Vermont, here.\n  var speciesSeenInVermont = []\n  opts.state = 'Vermont'\n  _.forEach(countUniqueSpecies(locationFilter(data, opts), dateFormat), (o) => {\n    var mapped = _.map(o, 'Common Name')\n    speciesSeenInVermont.push(mapped)\n  })\n  speciesSeenInVermont = _.flatten(speciesSeenInVermont)\n\n  data = orderByDate(data, opts).filter((d) => {\n    let distance = difference.distance(lat, long, d.Latitude, d.Longitude, 'M')\n    return distance <= radius\n  })\n  let i = 0\n  let areaResults = {}\n\n  areaResults.species = []\n  areaResults.speciesByDate = countUniqueSpecies(data, dateFormat)\n  _.sortBy(createPeriodArray(areaResults.speciesByDate), 'Date').forEach((e) => {\n    e.Species.forEach((specie) => {\n      areaResults.species.push(specie['Common Name'])\n      i++\n    })\n  })\n  areaResults.speciesTotal = i\n  areaResults.notSeen = _.difference(speciesSeenInVermont, areaResults.species)\n\n  return areaResults\n}\n\nasync function quadBirds (opts) {\n  if (!opts.year) {\n    opts.year = moment().format('YYYY')\n  }\n  const files = opts.input.split(',')\n  let data = []\n  await Promise.all(files.map(async (file) => {\n    const contents = await getData(file)\n    data = data.concat(contents)\n  }))\n  data = orderByDate(dateFilter(locationFilter(data, opts), opts))\n  const speciesIndex = {}\n  let completionDates = []\n\n  // Sort by the amount of unique entries per day\n  data.forEach((e) => {\n    const specie = e['Scientific Name']\n    if (!speciesIndex[specie]) {\n      speciesIndex[specie] = {\n        seen: undefined,\n        audio: undefined,\n        photo: undefined,\n        species: e\n      }\n    }\n    if (e['Submission ID'] && !speciesIndex[specie].seen) {\n      if (moment(e.Date, momentFormat(e.Date)).format('YYYY') === opts.year) {\n        speciesIndex[specie].seen = moment(e.Date, momentFormat(e.Date)).format('YYYY-MM-DD')\n      }\n    }\n    if (e.Format === 'Photo' && !speciesIndex[specie].photo) {\n      speciesIndex[specie].photo = moment(e.Date, momentFormat(e.Date)).format('YYYY-MM-DD')\n    }\n    if (e.Format === 'Audio' && !speciesIndex[specie].audio) {\n      speciesIndex[specie].audio = moment(e.Date, momentFormat(e.Date)).format('YYYY-MM-DD')\n    }\n    if (!speciesIndex[specie].completed &&\n      speciesIndex[specie].audio &&\n      speciesIndex[specie].photo &&\n      speciesIndex[specie].seen) {\n      if (moment(speciesIndex[specie].audio, momentFormat(speciesIndex[specie].audio)).isBefore(speciesIndex[specie].photo, momentFormat(speciesIndex[specie].audio))) {\n        speciesIndex[specie].completed = speciesIndex[specie].photo\n      } else {\n        speciesIndex[specie].completed = speciesIndex[specie].audio\n      }\n      completionDates.push({ Date: speciesIndex[specie].completed, species: speciesIndex[specie].species })\n    }\n  })\n\n  completionDates = orderByDate(completionDates)\n\n  if (opts.list) {\n    for (const species in completionDates) {\n      console.log(`${completionDates[species].Date}: ${completionDates[species].species['Common Name']}.`)\n    }\n  }\n  console.log(`You saw, photographed, and recorded audio for a total of ${completionDates.length} species in ${opts.year}.`)\n}\n\n// async function today (opts) {\n  // I want to know:\n  // - Was today a big day?\n  // - Did I get new world birds today?\n  // - Did I get new country birds today?\n  // - Did I get new state birds today?\n  // - Did I get new county birds today?\n  // - Did I get new photo birds today?\n  // - Did I get new audio birds today?\n// }\n\nexport {\n  firstTimes,\n  biggestTime,\n  firstTimeList,\n  quadBirds,\n  towns,\n  regions,\n  radialSearch,\n  removeSpuh\n}\n","import React, { Component } from 'react'\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <span\n          className=\"navbar-brand\"\n        >\n          Birding in Vermont\n        </span>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className={(this.props.active === 'towns') ? 'nav-item active' : 'nav-item' }>\n              <span\n                className=\"nav-link\"\n                onClick={() => this.props.changeActiveView('towns')}\n              >\n                Towns <span className=\"sr-only\">(current)</span>\n              </span>\n            </li>\n            <li className={(this.props.active === 'regions') ? 'nav-item active' : 'nav-item' }>\n              <span\n                className=\"nav-link\"\n                onClick={() => this.props.changeActiveView('regions')}\n              >\n                Biophsyical Regions\n              </span>\n            </li>\n            <li className={(this.props.active === 'needs') ? 'nav-item active' : 'nav-item' }>\n              <span className=\"nav-link\"\n              onClick={() => this.props.changeActiveView('needs')}>\n                Wash Co. Needs\n              </span>\n            </li>\n            <li className={(this.props.active === 'radial') ? 'nav-item active' : 'nav-item' }>\n              <span\n                className=\"nav-link\"\n                onClick={() => this.props.changeActiveView('radial')}\n              >\n                Radial Search\n              </span>\n            </li>\n            <li className='nav-item'>\n              <a class=\"nav-link\" href=\"/vtbird/subspecies/index.html\">Subspecies</a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default NavBar\n","import React, { Component } from 'react'\nimport vt from './ebird-ext/vermont.json'\nimport Biophsyical_regions from './ebird-ext/Polygon_VT_Biophysical_Regions.json'\nimport { select } from 'd3-selection'\nconst d3 = require('d3')\nconst d3Geo = require('d3-geo')\nconst topojson = require('topojson')\n\nclass Map extends Component {\n  constructor(props) {\n    super(props)\n    this.createMap = this.createMap.bind(this)\n  }\n\n  componentDidMount() {\n    this.createMap()\n  }\n\n  componentDidUpdate() {\n    this.createMap()\n  }\n\n  createMap() {\n    function colorArea (speciesTotal) {\n      if (speciesTotal) {\n        return color(speciesTotal)\n      } else {\n        console.log('What')\n        return '#ddd'\n      }\n    }\n\n    const data = this.props.data\n    const node = this.node\n    const width = this.props.size[0]\n    const height = this.props.size[1]\n\n    // TODO Make this change with the App level flag\n    const active = this.props.active\n\n    // Define map projection\n    var projection = d3Geo\n      .geoTransverseMercator()\n      .rotate([72.57, -44.20])\n      .translate([200, 300])\n      .scale([18000])\n\n    // Define path generator\n    var path = d3Geo.geoPath()\n      .projection(projection)\n\n    // Create SVG Element\n    var svg = select(node)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n\n    // Define scale to sort data values into color buckets\n    var color = d3\n      .scaleQuantize()\n      .domain([0, 112]) // TODO Change this to match highest\n      .range(['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'])\n\n    // Legend Stuff\n\n    // var y = d3.scaleSqrt()\n    //     .domain([0, 119])\n    //     .range([200, 200])\n\n    // var yAxis = d3.axisLeft(y)\n    //     .tickValues(color.domain())\n\n    var vermont, i, j\n\n    // Load TopoJSON\n    if (active === 'towns') {\n      for (i = 0; i < data.length; i++) {\n        var dataTown = data[i].town\n        var speciesTotals = parseFloat(data[i].speciesTotal)\n\n        for (j = 0; j < vt.objects.vt_towns.geometries.length; j++) {\n          var jsonTown = vt.objects.vt_towns.geometries[j].properties.town\n\n          if (dataTown.toUpperCase() === jsonTown) {\n            vt.objects.vt_towns.geometries[j].properties.speciesTotal = speciesTotals\n            vt.objects.vt_towns.geometries[j].properties.species = data[i].species\n            vt.objects.vt_towns.geometries[j].properties.notSeen = data[i].notSeen\n            break\n          }\n        }\n      }\n\n      vermont = topojson.feature(vt, vt.objects.vt_towns)\n    } else if (active === 'regions') {\n      vermont = Biophsyical_regions\n\n      // Add region counts to regions\n      for (i = 0; i < data.length; i++) {\n        var dataRegion = data[i].region\n        var speciesTotal = parseFloat(data[i].speciesTotal)\n\n        for (j = 0; j < vermont.features.length; j++) {\n          var jsonRegion = vermont.features[j].properties.name\n          if (dataRegion === jsonRegion) {\n            vermont.features[j].properties.speciesTotal = speciesTotal\n            vermont.features[j].properties.species = data[i].species\n            break\n          }\n        }\n      }\n    }\n\n    svg.append('path')\n      .datum(vermont)\n      .attr('d', path)\n      .style('stroke', '#777')\n      .style('stroke-width', '1')\n\n    // var g = svg.append('g')\n    //         .attr('class', 'key')\n    //         .attr('transform', 'translate(320, 165)')\n    //         // .call(yAxis)\n\n    // g.selectAll('rect')\n    //         .data(color.range().map(function (d, i) {\n    //           return {\n    //             y0: i ? y(color.domain()[i - 1]) : y.range()[0],\n    //             y1: i < color.domain().length ? y(color.domain()[i]) : y.range()[1],\n    //             z: d\n    //           }\n    //         }))\n    //         .enter().append('rect')\n    //             .attr('width', 8)\n    //             .attr('y', function (d) { return d.y0 })\n    //             .attr('height', function (d) { return d.y1 - d.y0 })\n    //             .style('fill', function (d) { return d.z })\n\n    let townSelected = false\n\n    svg.selectAll('.subunit')\n      .data(vermont.features)\n      .enter()\n      .append('path')\n      .attr('d', path)\n      .style('fill', (d) => colorArea(d.properties.speciesTotal))\n\n      .on('click', function (d) {\n        if (!townSelected) {\n          townSelected = d3.select(this)\n          townSelected\n            .style('fill', 'yellow')\n          console.log()\n        } else {\n          townSelected\n            .style('fill', colorArea(townSelected.data()[0].properties.speciesTotal))\n\n          townSelected = false\n        }\n      })\n\n      .on('mouseover', function (d) {\n        if (!townSelected) {\n          var xPosition = d3.mouse(this)[0]\n          var yPosition = d3.mouse(this)[1] - 30\n\n          svg.append('text')\n            .attr('id', 'tooltip')\n            .attr('x', xPosition)\n            .attr('y', yPosition)\n            .attr('text-anchor', 'middle')\n            .attr('font-family', 'sans-serif')\n            .attr('font-size', '11px')\n            .attr('font-weight', 'bold')\n            .attr('fill', 'black')\n            .text(`${d.properties.town || d.properties.name}${d.properties.speciesTotal ? ': ' + d.properties.speciesTotal : ''}`)\n\n          d3.select(this)\n            .style('fill', '#509e2f')\n\n          function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n          }\n\n          if (active === 'towns') {\n            d3.select('#locale')\n            .text([capitalizeFirstLetter(d.properties.town.toLowerCase())])\n          } else if (active === 'regions') {\n            d3.select('#locale')\n            .text([capitalizeFirstLetter(d.properties.name.toLowerCase())])\n          }\n\n          // TODO Why is Enosburg 'undefined'?\n          d3.select('#list')\n          .html((d.properties.species && d.properties.species.length > 0) ? `<li>${d.properties.species.join('</li><li>')}</li>` : 'No species logged.')\n\n          // The functionality is here, but the UI is overwhelming\n          d3.select('#notSeen')\n          .html((d.properties.notSeen && d.properties.notSeen.length > 0) ? `${d.properties.notSeen.join(', ')}` : '')\n        }\n      })\n      .on('mouseout', function (d) {\n        if (!townSelected) {\n          d3.select('#tooltip').remove()\n\n          d3.select(this)\n          .transition()\n          .duration(250)\n          .style('fill', function (d) {\n            var speciesTotal = d.properties.speciesTotal\n            if (speciesTotal) {\n              return color(speciesTotal)\n            } else {\n              return '#ddd'\n            }\n          })\n\n          d3.select('#locale')\n          .text()\n\n          d3.select('#list')\n          .text()\n        }\n      })\n\n    // var coordinates = projection([-72.5766799, 44.2581012])\n\n    // svg.append('svg:circle')\n    //   .attr(\"transform\", function(d) {\n    //       return \"translate(\" + coordinates + \")\";\n    //   })\n    //   .attr('r', 45)\n      // .style('fill', '#198298')\n      // .style('opacity', 0.25)\n    //\n    // svg.append(\"circle\")\n    //    .attr(\"cx\", coordinates[1])\n    //    .attr(\"cy\", coordinates[0])\n    //    .attr(\"r\", \"30px\")\n    //    .style(\"fill\", \"green\");\n\n\n    // Color lakes\n    svg.append('path')\n      .datum(topojson.feature(vt, vt.objects.lake))\n      .attr('d', path)\n      .style('stroke', '#89b6ef')\n      .style('stroke-width', '1px')\n      .style('fill', '#b6d2f5')\n  }\n\n  render() {\n    return (\n      <div className=\"container-md\">\n        <div className=\"row\">\n          <div id=\"map\" className=\"col-sm\">\n            <svg ref={node => this.node = node} width={750} height={750}></svg>\n          </div>\n          <div className=\"col-sm\" id=\"list-container\">\n            <h4 id=\"locale\">{/* empty h4 */}</h4>\n            <ul id=\"list\"></ul>\n            <p id=\"notSeen\"></p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Map","import React, { Component } from 'react'\nimport { Table } from 'react-bootstrap'\n\nfunction SpeciesTable (props) {\n  let data = props.data\n  return (\n    <Table striped bordered hover size=\"sm\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th colSpan=\"2\">Species</th>\n          <th colSpan=\"1\">Location</th>\n          <th colSpan=\"1\">Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((species, index) => {\n          return (\n            <tr key={index}>\n              <td>{index+1}</td>\n              <td>{species['Common Name']}</td>\n              <td><i>{species['Scientific Name']}</i></td>\n              <td>{species.Location}</td>\n              <td>{species.Date}</td>\n            </tr>\n          )\n        })}\n      </tbody>\n    </Table>\n  )\n}\n\nfunction TargetsTable (props) {\n  let data = props.data\n  return (\n    <Table striped bordered hover size=\"sm\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th colSpan=\"1\">Species</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((species, i) => {\n          return (\n            <tr key={i}>\n              <td>{i+1}</td>\n              <td>{species}</td>\n            </tr>\n          )\n        })}\n      </tbody>\n    </Table>\n  )\n}\n\nclass RadialView extends Component {\n  arrangeData (data) {\n    let newArr = []\n    for (let value of Object.values(data.speciesByDate)) {\n      value.forEach((entry) => newArr.push(entry))\n    }\n    return newArr\n  }\n\n  render() {\n    if (this.props.data) {\n      let notSeen = this.props.data.notSeen\n      let data = this.arrangeData(this.props.data)\n\n      return (\n        <div className=\"container-md\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <SpeciesTable data={data} />\n              <TargetsTable data={notSeen} />\n            </div>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col text-center\">\n              <p>Please import your data first. Note: at the moment, this is judged from a 10 mile radius of Montpelier. Allowing you to put your own address in is coming.</p>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default RadialView","import React, { Component } from 'react';\nimport './footer.scss';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <div className=\"container\">\n          <span className=\"text-muted\">Email me: <a href=\"mailto:richard@burntfen.com\">richard@burntfen.com</a>. Or <a href=\"https://github.com/RichardLitt/birdinginvermont.com\">contribute on GitHub</a>.</span>\n        </div>\n      </footer>\n    )\n  }\n}\n\nexport default Footer","import React, { Component } from 'react';\nimport './App.scss';\nimport NavBar from './NavBar'\nimport Map from './Map'\nimport RadialView from './RadialView'\nimport Footer from './Footer'\nimport CSVReader from 'react-csv-reader'\nconst ebird =  require('./ebird-ext/index.js')\n\n\nconst papaparseOptions = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.changeActiveView = this.changeActiveView.bind(this)\n    this.state = {\n      data: '',\n      active: 'towns'\n    }\n  }\n\n  changeActiveView (changeState) {\n    this.setState({\n      data: '',\n      active: changeState\n    })\n  }\n\n  async handleChange(e) {\n    let res\n    if (this.state.active === 'towns') {\n      res = await ebird.towns({all: true, input: e})\n    } else if (this.state.active === 'regions') {\n      res = await ebird.regions({all: true, input: e})\n    } else if (this.state.active === 'radial') {\n      res = await ebird.radialSearch({input: e, coordinates: [44.259548, -72.575882]})\n    }\n    console.log(res)\n    this.setState({\n      data: res\n    })\n  }\n\n  render() {\n    const data = this.state.data\n    const active = this.state.active\n    return (\n      <div className=\"App\">\n        <NavBar changeActiveView={this.changeActiveView} active={active} />\n        <div className=\"container-md\">\n          <div className=\"row\">\n            <div className=\"col text-center\">\n              <CSVReader\n                onFileLoaded={this.handleChange}\n                label=\"Select your MyEbirdData.csv file\"\n                parserOptions={papaparseOptions}\n              />\n            </div>\n          </div>\n        </div>\n        {active === 'radial'\n          ? <RadialView data={data} active={active} />\n          : <Map data={data} active={active} size={[750,750]} />}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}